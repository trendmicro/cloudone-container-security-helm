{{- if or .Values.cloudOne.runtimeSecurity.enabled .Values.cloudOne.malwareScanning.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: trendmicro-scout
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scout.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
    {{- include "scout.selectorLabels" .| nindent 6 }}
  template:
    metadata:
      name: trendmicro-scout
      labels:
      {{- include "scout.labels" .| nindent 8 }}
      annotations:
{{- $hasApparmorProfile := semverCompare ">=1.30" (include "kubeVersion" .) -}}
{{- if not $hasApparmorProfile }}
        container.apparmor.security.beta.kubernetes.io/falco: unconfined
        container.apparmor.security.beta.kubernetes.io/scout: unconfined
{{- end }}{{/* if */}}
        checksum/config: {{ include (print $.Template.BasePath "/scout/configmap.yaml") . | sha256sum }}
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
        checksum/metacollector: {{ include (print $.Template.BasePath "/k8s-metacollector-secret.yaml") . | sha256sum }}
{{- end }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scout) }}
{{- toYaml . | nindent 8 }}
{{- end }}{{/* with */}}
        customrules/enabled: {{ and .Values.cloudOne.runtimeSecurity.enabled .Values.cloudOne.runtimeSecurity.customRules.enabled | quote }}

    spec:
      serviceAccountName: {{ include "scout.serviceAccountName" . }}
      hostNetwork: true
      shareProcessNamespace: true
      dnsPolicy: ClusterFirstWithHostNet
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.scout) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}{{/* if */}}
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.scout }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scout) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.scout }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scout) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.scout }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.scout) | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.falco }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}{{/* if */}}
      {{- end }}{{/* with */}}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.scout }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $scoutSecurityContext := default .Values.securityContext.default.container $securityContext.scout }}
{{- $falcoSecurityContext := include "falco.securityContext" . | fromYaml }}
{{- $downloaderSecurityContext := default .Values.securityContext.default.container $securityContext.downloader }}
{{- $initSecurityContext := default .Values.securityContext.default.container $securityContext.init }}
{{- $jobStatusMntPath := "/status-dir" }}

{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}{{/* if $securityContextEnabled */}}
      containers:
        - name: falco
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falco) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ include "falco.securityContext" . | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if $securityContextEnabled */}}
          args:
            - /usr/bin/falco
{{- include "containerRuntime.sock.falco.args" .Values.scout.falco | trim | nindent 12 }}
            - -p
            - >
              container.id=%container.id
              container.image.digest=%container.image.digest
              container.image.repository=%container.image.repository
              container.image.tag=%container.image.tag
              container.name=%container.name
              evt.arg.filename=%evt.arg.filename
              evt.arg.mode=%evt.arg.mode
              evt.arg.name=%evt.arg.name
              evt.category=%evt.category
              evt.num=%evt.num
              evt.rawtime=%evt.rawtime
              evt.type=%evt.type
              k8s.ns.name=%k8s.ns.name
              k8s.pod.id=%k8s.pod.id
              k8s.pod.labels=%k8s.pod.labels
              k8s.pod.name=%k8s.pod.name
              proc.args=%proc.args
              proc.cmdline=%proc.cmdline
              proc.exe=%proc.exe
              proc.exeline=%proc.exeline
              proc.name=%proc.name
              proc.pcmdline=%proc.pcmdline
              proc.pid=%proc.pid
              proc.pname=%proc.pname
              proc.ppid=%proc.ppid
              user.loginuid=%user.loginuid
              user.name=%user.name
            - -o
            - stdout_output.enabled={{ default "false" .Values.scout.falco.stdout_enabled }}
            - -o
            - syslog_output.enabled={{ default "false" .Values.scout.falco.syslog_enabled }}
            - -o
            - log_level={{ include "logLevel" (list .Values.scout.falco.logLevel .) }}
        {{- if .Values.scout.falco.extraArgs }}
{{ toYaml .Values.scout.falco.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
            - name: SKIP_DRIVER_LOADER
              value: "true"
            - name: TZ
              value:
          {{- if .Values.scout.falco.env }}
{{ .Values.scout.falco.env | toYaml | indent 12 }}
          {{- end }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
{{- include "containerRuntime.sock.volumeMounts" ( list "/host" .Values.scout.falco ) | trim | nindent 12 }}
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /sys/kernel/debug
              name: debugfs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
              readOnly: true
            - mountPath: /etc/scout/rules.d
              name: rules-volume
              readOnly: true
            - mountPath: /var/run/scout
              name: grpc-socket-dir
            - mountPath: /root/.falco
              name: components-dir
              readOnly: true
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
        - name: falco-customrules
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falco) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ include "falco.securityContext" . | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if $securityContextEnabled */}}
          args:
            - /usr/wrappers/falco-customrules-wrapper.sh
          env:
            - name: SKIP_DRIVER_LOADER
              value: "true"
            - name: TZ
              value:
          {{- if .Values.scout.falco.env }}
{{ .Values.scout.falco.env | toYaml | indent 12 }}
          {{- end }}
          {{- range $idx, $val := .Values.scout.falco.env }}
            {{- if hasKey $val "valueFrom" }}
              {{- if hasKey $val.valueFrom "secretKeyRef" }}
                {{- if not ( lookup "v1" "Secret" $.Release.Namespace $val.valueFrom.secretKeyRef.name ) -}}
                  {{- fail ( printf "secret %s is missing from namespace %s, with key '%s', required by .Values.scout.falco.env '%s'"
                          $val.valueFrom.secretKeyRef.name
                          $.Release.Namespace
                          $val.valueFrom.secretKeyRef.key
                          $val.name
                  ) -}}
                {{- end}}
              {{- end }}
            {{- end }}
          {{- end }}{{/* range */}}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HEC_CLIENT_PARAMS
              value: "{{ include "hec_client_params_as_env_var" .Values.cloudOne.runtimeSecurity.customRules.output.splunk }}"
          {{- if .Values.cloudOne.runtimeSecurity.customRules.output.splunk.hecTokenSecretName }}
          {{- if not ( lookup "v1" "Secret" .Release.Namespace .Values.cloudOne.runtimeSecurity.customRules.output.splunk.hecTokenSecretName ) -}}{{- fail (
              printf "secret %s is expected in namespace %s, with key 'hec_secret' containing Splunk HEC token"
                .Values.cloudOne.runtimeSecurity.customRules.output.splunk.hecTokenSecretName
                .Release.Namespace
              ) -}}{{- end}}
            - name: SPLUNK_HEC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudOne.runtimeSecurity.customRules.output.splunk.hecTokenSecretName }}
                  key: hec_secret
          {{- end }}{{/* .Values.cloudOne.runtimeSecurity.customRules.output.splunk.hecTokenSecretName */}}
          {{- if .Values.cloudOne.runtimeSecurity.customRules.ociRepository.enabled }}
            {{- with .Values.cloudOne.runtimeSecurity.customRules.ociRepository.basicAuthTokenSecretName }}
              {{- if not ( lookup "v1" "Secret" $.Release.Namespace . ) -}}{{- fail (
                  printf "secret %s is expected in namespace %s, with key 'falcoctl' containing basic auth as for FALCOCTL_REGISTRY_AUTH_BASIC"
                    .
                    $.Release.Namespace
                  ) -}}{{- end}}
            - name: FALCOCTL_REGISTRY_AUTH_BASIC
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: falcoctl
            {{- end }}
          {{- end }}
          volumeMounts:
{{- include "containerRuntime.sock.volumeMounts" ( list "/host" .Values.scout.falco ) | trim | nindent 12 }}
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /sys/kernel/debug
              name: debugfs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
              readOnly: true
            - mountPath: /usr/wrappers
              name: customrules-wrappers
              readOnly: true
{{- if .Values.cloudOne.runtimeSecurity.customRules.ociRepository.enabled }}
            - mountPath: {{ .Values.scout.falco.ociRepository.artifacts_dir }}
              name: oci-repository-artifacts-dir
              readOnly: false
            - mountPath: /etc/falcoctl-config-volume
              name: falcoctl-config-volume
              readOnly: true
            - mountPath: /root/.docker
              name: falcoctl-credentials
              readOnly: false
            - mountPath: {{ .Values.scout.falco.falcoctl.pipes_dir }}
              name: falcoctl-pipes
              readOnly: false
            - mountPath: /root/.sigstore
              name: falcoctl-sigstore
              readOnly: false
            - mountPath: /tmp
              name: falcoctl-tmpfs
              readOnly: false
{{- end }}
            - mountPath: /etc/falco/rules.d
              name: customrules-volume
              readOnly: true
            - mountPath: /root/.falco
              name: components-dir
              readOnly: true
{{- end }}{{/* if .Values.cloudOne.runtimeSecurity.customRules.enabled */}}
        - name: scout
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.scout }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          args:
            - --zap-devel={{ default "false" .Values.logConfig.devel }}
            - --zap-log-level={{ include "logLevel" (list .Values.scout.scout.logLevel .) }}
            - --zap-encoder={{ default "json" .Values.logConfig.encoder }}
            - --zap-stacktrace-level={{ default "error" .Values.logConfig.stacktraceLevel }}
            - --zap-time-encoding={{ default "rfc3339" .Values.logConfig.timeEncoding }}
            - --grpc-socket-path
            - unix:///var/run/scout/scout.sock
            - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
            - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
            - --excluded-namespaces
            {{- $excludeNS := (include "namespaceExclusions" .) | splitList "," }}
            {{- $excludeNS := default (list) $excludeNS }}
            {{- if .Values.scout.excludeSameNamespace }}
                {{- $excludeNS = append $excludeNS .Release.Namespace }}
            {{- end}}{{/* if */}}
            - {{ $excludeNS | join "," | quote }}
            - --falco-event-max-diff
            - 90s
            {{- if ne (len .Values.scout.scout.falcoInternalEvent) 0 }}
            - --falco-internal-event
            - {{ join "," .Values.scout.scout.falcoInternalEvent }}
            {{- end}}{{/* if */}}
            - --k8s-metacollector
            - {{ include "k8sMetaCollector.svc.url" . }}
            {{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
            - --k8s-metacollector-cert
            - /etc/scout/metacollector-ca-cert.pem
            {{- end}}
{{- include "containerRuntime.sock.args" ( list "cri" "" .Values.scout.falco ) | trim | nindent 12 }}
            - --malware-scanning={{ default "false" .Values.cloudOne.malwareScanning.enabled }}
            - --malware-event-count={{ .Values.cloudOne.malwareScanning.maximumEventCount}}
            - --runtime-security={{ default "false" .Values.cloudOne.runtimeSecurity.enabled }}
            {{- if .Values.cloudOne.malwareScanning.enabled }}
            - --malware-scanner-url
            - {{ include "malwareScanner.svc.url" . }}:{{ .Values.cloudOne.malwareScanning.scanner.port }}
            - --excluded-scan-path
            {{- $excludedPaths := (default (list) .Values.cloudOne.malwareScanning.excludedPaths) }}
            {{- $combinedListPath := .Values.malwareScanner.defaultExcludedPaths }}
            {{- range $excludedPaths }}
            {{- $combinedListPath = append $combinedListPath . }}
            {{- end }}{{/* range */}}
            - {{ $combinedListPath | join "," | quote }}
            - --job-status-file-path={{ printf "%s%s%s" "../.." $jobStatusMntPath "/malware_scan_job_status.json" }}
            - --scan-worker-count
            - "{{ .Values.malwareScanner.scanWorkerCount }}"
            {{- end }}{{/* if .Values.cloudOne.malwareScanning.enabled */}}
        {{- if .Values.scout.scout.extraArgs }}
{{ toYaml .Values.scout.scout.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
          {{- include "container.security.proxy.env" . | nindent 12 }}
          {{- range $key, $value := .Values.scout.scout.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
          {{- if .Values.cloudOne.malwareScanning.enabled }}
            - name: TM_AM_SCAN_TIMEOUT_SECS
              value: "{{ .Values.cloudOne.malwareScanning.scanTimeoutSeconds }}"
          {{- end }}{{/* if */}}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $scoutSecurityContext | indent 12 }}
{{- if $hasApparmorProfile }}
            appArmorProfile:
              type: Unconfined
{{- end }}{{/* if */}}
{{- end }}{{/* if */}}
          volumeMounts:
{{- include "containerRuntime.sock.volumeMounts" ( list "/host" .Values.scout.falco ) | trim | nindent 12 }}
            - mountPath: /var/run/scout/
              name: grpc-socket-dir
              readOnly: true
            - mountPath: /etc/scout/rules.d
              name: rules-volume
            - mountPath: /var/scout
              name: scout-workdir
            - mountPath: /secrets
              name: api-key
              readOnly: true
            - mountPath: /host
              name: host-root
              readOnly: true
            - mountPath: {{ $jobStatusMntPath }}
              name: status-dir
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
            - mountPath: /etc/scout/metacollector-ca-cert.pem
              name: metacollector-grpc-certs
              subPath: ca-cert.pem
              readOnly: true
{{- end }}
          {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 12 }}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.scout) | indent 12 }}
      initContainers:
        {{ if eq .Values.scout.downloader.componentType "falco-ebpf-program" }}
        - name: falcoversion
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.falco }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.falcoversion) | indent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $initSecurityContext | indent 12 }}
{{- end }}{{/* if */}}
          volumeMounts:
            - mountPath: {{ .Values.scout.downloader.componentDir }}
              name: components-dir
          command:
            - cp
          args:
            - /component.version
            - {{ .Values.scout.downloader.componentDir }}
        {{- end }}{{/* if eq .Values.scout.downloader.componentType "falco-ebpf-program" */}}
        - name: downloader
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.scout }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with */}}
          command:
            - /downloader
          args:
            - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
            - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
            - --log-level
            - debug
            - --componentdir
            - {{ .Values.scout.downloader.componentDir }}
{{- if .Values.scout.falco.modernBpf }}
            - --btfpath
            - /sys/kernel/btf/vmlinux
{{- end }}{{/* if */}}
        {{- if .Values.scout.downloader.extraArgs }}
{{ toYaml .Values.scout.downloader.extraArgs | indent 12 }}
        {{- end }}{{/* if */}}
          env:
          {{- include "container.security.proxy.env" . | nindent 12 }}
          {{- range $key, $value := .Values.scout.downloader.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}{{/* range */}}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOST_ROOT
              value: "/host"
            - name: SCOUT_COMPONENT_TYPE
              value: {{ .Values.scout.downloader.componentType }}
            - name: SCOUT_COMPONENT_VERSION
              value: "{{ .Values.scout.downloader.componentDir }}/component.version"
          volumeMounts:
            - mountPath: /var/scout
              name: scout-workdir
            - mountPath: {{ .Values.scout.downloader.componentDir }}
              name: components-dir
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /secrets
              name: api-key
              readOnly: true
            {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 12 }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $downloaderSecurityContext | indent 12 }}
{{- end }}{{/* if */}}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.downloader) | indent 12 }}
      volumes:
        - name: api-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
{{- include "containerRuntime.sock.volumes" ( list $ .Values.scout.falco ) | trim | nindent 8 }}
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: host-root
          hostPath:
            path: /
            type: Directory
        - name: status-dir
          emptyDir:
            sizeLimit: 1Mi
        - name: debugfs
          hostPath:
            path: /sys/kernel/debug
        - name: config-volume
          configMap:
            name: {{ template "container.security.name" . }}-scout-config
            items:
              - key: falco.yaml
                path: falco.yaml
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
              - key: falco-customrules.yaml
                path: falco-customrules.yaml
{{- end }}
              - key: default_rules.yaml
                path: default_rules.yaml
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
        - name: customrules-wrappers
          configMap:
            name: {{ template "container.security.name" . }}-customrules-falco-config
            items:
              - key: falco-customrules-wrapper.sh
                path: falco-customrules-wrapper.sh
                mode: 0555
{{- end }}
        - name: grpc-socket-dir
          emptyDir:
            sizeLimit: 10Mi
        - name: rules-volume
          emptyDir:
            sizeLimit: 50Mi
{{- if .Values.cloudOne.runtimeSecurity.customRules.enabled }}
        - name: customrules-volume
          configMap:
            name: {{ template "container.security.name" . }}-customrules
  {{- if .Values.cloudOne.runtimeSecurity.customRules.ociRepository.enabled }}
        - name: oci-repository-artifacts-dir
          emptyDir:
            sizeLimit: 10Mi
        - name: falcoctl-config-volume
          configMap:
            name: {{ template "container.security.name" . }}-customrules-falco-config
            items:
              - key: falcoctl.yaml
                path: falcoctl.yaml
        - name: falcoctl-tmpfs
          emptyDir:
            sizeLimit: 50Mi
        - name: falcoctl-credentials
          emptyDir:
            sizeLimit: 1Mi
        - name: falcoctl-sigstore
          emptyDir:
            sizeLimit: 50Mi
        - name: falcoctl-pipes
          emptyDir:
            sizeLimit: 50Mi
  {{- end }}
{{- end }}
        - name: scout-workdir
          emptyDir:
            sizeLimit: 50Mi
        - name: components-dir
          emptyDir:
            sizeLimit: 50Mi
{{- if eq "tls" .Values.cloudOne.k8sMetaCollector.grpcAuth.type }}
        - name: metacollector-grpc-certs
          secret:
            secretName: {{ template "k8sMetaCollector.fullname" . }}-tls-certificate
{{- end }}
{{- include "proxy.selfSignedCertificates.volumes" . | nindent 8 }}
  updateStrategy:
    type: RollingUpdate
{{- end }}{{/* if or (eq true .Values.cloudOne.runtimeSecurity.enabled) (eq true .Values.cloudOne.malwareScanning.enabled) */}}
