{{- if or (eq true .Values.cloudOne.policyOperator.enabled) (.Values.cloudOne.clusterRegistrationKey) (.Values.visionOneFeatureGate) (eq (include "container.security.isVisionOneEndpoint" .) "true") }}
{{- include "validateClusterInput" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trendmicro-policy-operator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "policyOperator.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "policyOperator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/auth: {{ include "container.security.auth.secret" . | sha256sum }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.policyOperator) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "policyOperator.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "policyOperator.serviceAccountName" . }}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.policyOperator }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container.policyOperator }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.policyOperator }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
      - name: trendmicro-policy-operator
{{- if $securityContextEnabled }}
        securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
        {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
        {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
        {{- $tag := (default $imageDefaults.tag .tag) }}
        image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
        imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
        args:
        - --zap-devel={{ default "false" .Values.logConfig.devel }}
        - --zap-log-level={{ include "logLevel" (list .Values.cloudOne.policyOperator.logLevel .) }}
        - --zap-encoder={{ default "json" .Values.logConfig.encoder }}
        - --zap-stacktrace-level={{ default "error" .Values.logConfig.stacktraceLevel }}
        - --zap-time-encoding={{ default "rfc3339" .Values.logConfig.timeEncoding }}
        - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
        - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
        - --reconciliation-period={{ .Values.cloudOne.policyOperator.reconciliationPeriod }}
        - --cluster-policy-name={{ .Values.cloudOne.policyOperator.clusterPolicyName }}
        - --cluster-name={{ .Values.cloudOne.clusterName }}
        - --cluster-name-prefix={{ .Values.cloudOne.clusterNamePrefix }}
        - --cluster-policy-id={{ .Values.cloudOne.policyId }}
        - --cluster-group-id={{ .Values.cloudOne.groupId }}
        - --namespace={{ .Release.Namespace }}
        - --auth-name={{ template "container.security.fullname" . }}-auth
        - --auto-register={{ default "false" .Values.cloudOne.clusterRegistrationKey }}
        - --enable-token-rotation={{ include "container.security.isVisionOneEndpoint" . }}
        {{- if .Values.visionOneFeatureGate }}
        - --spc-mode={{ default "false" .Values.spc.enabled }}
        - --policy-sync-interval={{ include "policyOperator.policy.sync.interval" . }}
        - --policy-config-name={{ template "container.security.name" . }}-policy-config
        - --runtime-rulesets-config-name={{ template "container.security.name" . }}-runtime-rulesets-config
        - --runtime-rules-config-name={{ template "container.security.name" . }}-runtime-rules-config
        - --runtime-policy-config-name={{ template "container.security.name" . }}-runtime-policy-config
        - --vision-one-feature-gate=true
        {{- end }}
        command:
        - /app/policy-operator
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- include "container.security.proxy.env" . | nindent 8 }}
        volumeMounts:
        - mountPath: /var/policy-operator
          name: workdir
        - mountPath: /secrets
          name: api-key
        {{- if .Values.cloudOne.clusterRegistrationKey }}
        - mountPath: /reg-secrets
          name: registration-key
        {{- end }}
        {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 8 }}
      volumes:
        - name: workdir
          emptyDir:
            sizeLimit: 50Mi
        - name: api-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
        {{- if .Values.cloudOne.clusterRegistrationKey }}
            optional: true
        - name: registration-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-registration-key
        {{- end }}
        {{- include "proxy.selfSignedCertificates.volumes" . | nindent 8 }}
      terminationGracePeriodSeconds: 10
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.policyOperator }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.policyOperator) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.policyOperator }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.policyOperator) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.policyOperator }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.policyOperator) | indent 8 }}
{{- end }}
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.policyOperator) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}
      restartPolicy: Always
{{ if .Values.serviceAccount.create }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "policyOperator.serviceAccountName" . }}
  labels:
    {{- include "policyOperator.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.policyOperator.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-policy-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container.security.labels" . | nindent 4 }}
data:
  cluster.policy: "{}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-runtime-rulesets-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container.security.labels" . | nindent 4 }}
data:
  runtime.rulesets: "{}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-runtime-rules-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container.security.labels" . | nindent 4 }}
data:
  runtime.rules: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-runtime-policy-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container.security.labels" . | nindent 4 }}
data:
  runtime.policy: "{}"
