{{- if eq true .Values.cloudOne.admissionController.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: trendmicro-admission-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "admissionController.labels" . | nindent 4 }}
spec:
  ports:
    - port: 443
      targetPort: 8443
      protocol: TCP
  selector:
    {{- include "admissionController.selectorLabels" . | nindent 4 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trendmicro-admission-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "admissionController.labels" . | nindent 4 }}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.admissionController }}
  selector:
    matchLabels:
      {{- include "admissionController.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/auth: {{ include "container.security.auth.secret" . | sha256sum }}
        # Force the pods to restart when validatingwebhook.yaml is updated. This is to ensure certificate is in sync.
        checksum/cert: {{ include (print $.Template.BasePath "/validatingwebhook.yaml") . | sha256sum }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.admissionController) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "admissionController.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "admissionController.serviceAccountName" . }}
      automountServiceAccountToken: true
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.admissionController }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.admissionController }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: trendmicro-admission-controller
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "trendmicrocloudone" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
      {{- end }}
          ports:
            - containerPort: 8443
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 20
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 20
            failureThreshold: 6
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
            - name: api-key
              mountPath: /secrets
              readOnly: true
            {{- if .Values.telemetry.publicKey }}
            - name: telemetry-secret
              mountPath: /telemetry
            {{- end }}{{/* .Values.telemetry.publicKey */}}
            - name: policy-config
              mountPath: /etc/config
            {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 12 }}
          args:
            - --zap-devel={{ default "false" .Values.logConfig.devel }}
            - --zap-log-level={{ include "logLevel" (list .Values.cloudOne.admissionController.logLevel .) }}
            - --zap-encoder={{ default "json" .Values.logConfig.encoder }}
            - --zap-stacktrace-level={{ default "error" .Values.logConfig.stacktraceLevel }}
            - --zap-time-encoding={{ default "rfc3339" .Values.logConfig.timeEncoding }}
            - --tlsCertFile=/etc/webhook/certs/cert.pem
            - --tlsKeyFile=/etc/webhook/certs/key.pem
            - --tls-min-version={{ include "tlsConfig.minTLSVersion" .Values.tlsConfig }}
            - --tls-cipher-suites={{ include "tlsConfig.cipherSuites" .Values.tlsConfig }}
            - --cloud-one-endpoint={{ include "container.security.endpoint" . }}
            - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
            - --excluded-namespaces
            {{- $excludeNS := include "namespaceExclusions" . }}
            - {{ $excludeNS | quote }}
            - --trusted-scan-operators
            {{- $trustedOperators := (default (list) .Values.cloudOne.admissionController.trustedScanOperators) }}
            - {{ $trustedOperators | join "," | quote }}
            - --application-version=$(APPLICATION_VERSION)
            {{- if .Values.telemetry.enabled }}
            - --telemetry-endpoint={{ .Values.telemetry.endpoint }}
            - --telemetry-interval={{ .Values.telemetry.interval }}
            - --telemetry-api-key={{ default "" .Values.telemetry.apiKey }}
            {{- if .Values.telemetry.publicKey }}
            - --telemetry-key-file=/telemetry/key.pem
            {{- end }}{{/* .Values.telemetry.publicKey */}}
            {{- end }}{{/* .Values.telemetry.enabled */}}
            - --trusted-images={{ include "digest" . }}
            {{- if .Values.visionOneFeatureGate }}
            - --vision-one-feature-gate=true
            {{- end }}
            - 2>&1
          env:
            {{- include "container.security.proxy.env" . | nindent 12 }}
            - name: SCAN_MANAGER_SERVICE_ACCOUNT
              value: {{ include "scanManager.serviceAccountName" . }}
            - name: APPLICATION_VERSION
              value: {{ .Chart.AppVersion | quote }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.admissionController) | indent 12 }}
      volumes:
        - name: api-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
        - name: varrun
          emptyDir:
            sizeLimit: 1Mi
        - name: webhook-certs
          secret:
            secretName: {{ template "admissionController.fullname" . }}-tls-certificate
        {{- if .Values.telemetry.publicKey }}
        - name: telemetry-secret
          secret:
            secretName: {{ template "container.security.fullname" . }}-telemetry
            items:
            - key: publicKey
              path: key.pem
        {{- end }}{{/* .Values.telemetry.publicKey */}}
        - name: policy-config # Use projected volume to mount all policy config files in a single volume (ie. policy, rulesets)
          projected:
            sources:
              - configMap:
                  name: {{ template "container.security.name" . }}-policy-config
        {{- include "proxy.selfSignedCertificates.volumes" . | nindent 8 }}
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.admissionController }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.admissionController) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.admissionController }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.admissionController) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.admissionController }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.admissionController) | indent 8 }}
{{- end }}
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.admissionController) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}
      restartPolicy: Always
---
{{ if .Values.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "admissionController.serviceAccountName" . }}
  labels:
    {{- include "admissionController.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.admissionController.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
